---
- name: Bootstrap for new host
  hosts: warp
  become: yes

  vars:
    rsa_key_size: "4096"

  tasks:
######
# Checks, lookups and new facts
######
    - name: Compute facts
      set_fact:
        host_key_path: "{{ inventory_dir }}/keys/{{ inventory_hostname }}-key"
        target_port: "{{ ansible_port|default('22', true) }}"
      tags: last

    - name: Check mandatory variable service_user
      fail: msg="service_user is undefined"
      when: not service_user

    - name: Lookup service_user password
      set_fact:
        service_passwd: "{{ lookup('password', inventory_dir + '/secrets/' + inventory_hostname + '.' + service_user +'.pass chars=ascii_letters,digits,hexdigits,punctuation') }}"
      delegate_to: localhost
      become: no

    - name: Connection private key is in place
      stat:
        path="{{ host_key_path }}"
      register: host_key_presence
      delegate_to: localhost
      become: no

    - name: Host private key has been generated by bootstrap
      stat:
        path="/etc/ssh/.glx_generated_keys"
      register: glx_generated_keys

    - name: Compute facts about key generation
      set_fact:
        need_server_key_regen: not glx_generated_keys.stat.exists
        need_host_key_regen: not host_key_presence.stat.exists
        need_to_ban_current_key: ansible_ssh_private_key_file is defined and ansible_user != service_user
######
# Host basic setup
######
    - name: Manually update apt cache
      shell: apt-get update
      args:
        warn: no
      environment:
        DEBIAN_FRONTEND: "noninteractive"

    - name: Manually install mandatory packages for apt module
      shell: apt-get -o Dpkg::Options::="--force-confold" install python-apt python-apt-dev aptitude -y
      args:
        warn: no
      environment:
        DEBIAN_FRONTEND: "noninteractive"

    - name: System upgrade
      apt:
        update_cache=yes
        upgrade=full

    - name: Mandatory system packages for ansible installation
      apt:
        pkg="{{ item }}"
      with_items:
        - libssl-dev
        - libffi-dev
        - git
        - python-dev
        - libperl-dev
        - sudo
        - build-essential
        - python-setuptools
        - python-distutils-extra

    - name: Remove blocking system packages for ansible installation
      apt:
        pkg=python-pip
        state=absent
        purge=yes

    - name: Install pip
      easy_install:
        name=pip
        state=present

    - name: install mandatory pip packages & ansible
      pip:
        name="{{ item }}"
        state=latest
      with_items:
        - pip
        - pyopenssl
        - ndg-httpsclient
        - pyasn1
        - ansible

    - name: create etc/ansible dir
      file:
        path=/etc/ansible
        state=directory
        owner=root
        group=root
        mode=0755

    - name: service group is present
      group:
        name="{{ service_user }}"
        gid=42000
        state=present

    - name: service user is present
      user:
        name="{{ service_user }}"
        uid=42000
        groups="{{ service_user }},sudo"
        generate_ssh_key=yes
        state=present
        shell=/bin/bash

    - name: set permissions of /home/{{ service_user }}/ directory
      file:
        path=/home/{{ service_user }}
        owner={{ service_user }}
        group={{ service_user }}
        state=directory
        mode=0750

    - name: Change password for service_user
      shell: >
        usermod -p $(echo '{{ service_passwd }}' | openssl passwd -1 -stdin) {{ service_user }}
######
# SSH key black magic
######
    - name: generate new host key {{ host_key_path }}
      when: need_host_key_regen
      command: "ssh-keygen -t rsa -b {{ rsa_key_size }} -f {{ host_key_path }}"
      delegate_to: localhost
      become: no

    - name: host_key is authorized for user
      authorized_key:
        user="{{ service_user }}"
        key="{{ lookup('file', host_key_path + '.pub') }}"
        state=present
        exclusive=yes

    - name: service_user is sudoer
      lineinfile: >
        dest=/etc/sudoers.d/service_user
        regexp='^{{ service_user }}'
        line='{{ service_user }} ALL=(ALL) NOPASSWD: ALL'
        state='present'
        validate='visudo -cf %s'
        create=yes

    - name: service_user is sudo without tty
      lineinfile: >
        dest=/etc/sudoers.d/service_user
        regexp='^Defaults:{{ service_user }}'
        line='Defaults:{{ service_user }} !requiretty'
        state='present'
        validate='visudo -cf %s'
        create=yes

# [inspired_by] http://www.cyberciti.biz/faq/howto-regenerate-openssh-host-keys/
    - name: regenerating ssh_keys
      shell: /bin/rm -f /etc/ssh/ssh_host_* && /usr/sbin/dpkg-reconfigure openssh-server
      args:
        warn: no
      when: need_server_key_regen

    - name: leaving trace of key generation
      file:
        path="/etc/ssh/.wscl_generated_keys"
        owner=root
        group=root
        state=touch
      when: need_server_key_regen

    - name: delete known fingerprint of host
      shell: "ssh-keygen -R {{ item }}"
      delegate_to: localhost
      become: no
      when: need_server_key_regen
      with_items:
        - "[{{ inventory_hostname }}]:{{ target_port }}"
        - "{{ inventory_hostname }}"

    - name: add new fingerprint of host to known host
      shell: "ssh-keyscan -p {{ target_port }} {{ inventory_hostname }} >> ~/.ssh/known_hosts"
      delegate_to: localhost
      become: no
      when: need_server_key_regen

    - name: generating host variables files {{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml
      template:
        src="templates/host_vars.j2"
        dest="{{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
      delegate_to: localhost
      become: no
      tags: last
